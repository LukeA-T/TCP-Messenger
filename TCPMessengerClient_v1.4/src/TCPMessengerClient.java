
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.net.Socket;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.URL;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 * @author Luke Ahrens-Townsend Date: April 20, 2017
 */
public class TCPMessengerClient extends javax.swing.JFrame {

    Socket clientSocket;
    int portNumber = 12000;
    String serverAddress, inputLine, outputLine;
    String userName = "Client";
    BufferedReader in;
    PrintWriter out;
    boolean connected = false;
    boolean talking = false;
    int initMsg = 0;
    ImageIcon icon;

    /**
     * Creates new form TCPMessengerClient
     */
    public TCPMessengerClient() {
        initComponents();
        customInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        hostIpLabel = new javax.swing.JLabel();
        hostIpField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        msgInputArea = new javax.swing.JTextArea();
        msgSendButton = new javax.swing.JButton();
        userNameArea = new javax.swing.JTextField();
        userNameButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgDisplayArea = new javax.swing.JTextArea();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TCP Messenger - Client");
        setIconImage(setIcon());
        setLocation(new java.awt.Point(75, 100));
        setMinimumSize(new java.awt.Dimension(400, 485));
        setName("TCPMessengerClient"); // NOI18N

        hostIpLabel.setText("Host IP address:");

        hostIpField.setNextFocusableComponent(msgInputArea);
        hostIpField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostIpFieldActionPerformed(evt);
            }
        });
        hostIpField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                hostIpFieldKeyTyped(evt);
            }
        });

        connectButton.setFocusable(false);
        connectButton.setLabel("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        msgInputArea.setColumns(20);
        msgInputArea.setLineWrap(true);
        msgInputArea.setRows(1);
        msgInputArea.setToolTipText("");
        msgInputArea.setWrapStyleWord(true);
        msgInputArea.setNextFocusableComponent(msgSendButton);
        msgInputArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                msgInputAreaKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(msgInputArea);

        msgSendButton.setLabel("Send");
        msgSendButton.setMaximumSize(new java.awt.Dimension(73, 23));
        msgSendButton.setMinimumSize(new java.awt.Dimension(73, 23));
        msgSendButton.setNextFocusableComponent(userNameArea);
        msgSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msgSendButtonActionPerformed(evt);
            }
        });

        userNameArea.setNextFocusableComponent(hostIpField);
        userNameArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userNameAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                userNameAreaFocusLost(evt);
            }
        });
        userNameArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameAreaActionPerformed(evt);
            }
        });
        userNameArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                userNameAreaKeyTyped(evt);
            }
        });

        userNameButton.setText("Submit");
        userNameButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        userNameButton.setFocusable(false);
        userNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameButtonActionPerformed(evt);
            }
        });

        userNameLabel.setText("Your name:");

        msgDisplayArea.setEditable(false);
        msgDisplayArea.setColumns(20);
        msgDisplayArea.setWrapStyleWord(true);
        msgDisplayArea.setFocusable(false);
        jScrollPane1.setViewportView(msgDisplayArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(msgSendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hostIpLabel)
                            .addComponent(userNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userNameArea)
                            .addComponent(hostIpField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userNameArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hostIpLabel)
                        .addComponent(hostIpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msgSendButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hostIpFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostIpFieldActionPerformed

    }//GEN-LAST:event_hostIpFieldActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            createConnection();
        } catch (IOException ex) {
            Logger.getLogger(TCPMessengerClient.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!connected) {
            msgDisplayArea.append("Connection attempt failed.\n");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void msgSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msgSendButtonActionPerformed
        sendMessage();
    }//GEN-LAST:event_msgSendButtonActionPerformed

    private void msgInputAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_msgInputAreaKeyTyped
        if (evt.getKeyChar() == '\n') {
            sendMessage();
        }
    }//GEN-LAST:event_msgInputAreaKeyTyped

    private void hostIpFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hostIpFieldKeyTyped
        if (evt.getKeyChar() == '\n') {
            try {
                createConnection();
            } catch (IOException ex) {
                Logger.getLogger(TCPMessengerClient.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (!connected) {
                msgDisplayArea.append("Connection attempt failed.\n");
            }
        }
    }//GEN-LAST:event_hostIpFieldKeyTyped

    private void userNameAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameAreaActionPerformed

    }//GEN-LAST:event_userNameAreaActionPerformed

    private void userNameAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userNameAreaKeyTyped
        if (evt.getKeyChar() == '\n') {
            setUserName();
        }

        Timer t = new Timer();
        t.schedule(new TimerTask() {
            public void run() {
                if (!userNameArea.getText().equals(userName)) {
                    userNameArea.setForeground(new Color(187, 187, 187));
                } else {
                    userNameArea.setForeground(new Color(0, 195, 0));
                }
            }
        }, 5);
    }//GEN-LAST:event_userNameAreaKeyTyped

    private void userNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameButtonActionPerformed
        setUserName();
    }//GEN-LAST:event_userNameButtonActionPerformed

    private void userNameAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameAreaFocusGained

    }//GEN-LAST:event_userNameAreaFocusGained

    private void userNameAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userNameAreaFocusLost
        userNameArea.setText(userName);
        userNameArea.setForeground(new Color(0, 195, 0));
    }//GEN-LAST:event_userNameAreaFocusLost

    private void customInitComponents() {
        Color mainBackground = new Color(60, 63, 65);
        Color textFieldBackground = new Color(69, 73, 74);
        Color textSelection = new Color(75, 110, 175);
        Font plainTextFont = new Font("Dialog", Font.PLAIN, 12);
        Font boldTextFont = new Font("Dialog", Font.BOLD, 12);
        Color fontColor = new Color(187, 187, 187);

        getContentPane().setBackground(mainBackground);

        userNameLabel.setFont(boldTextFont);
        userNameLabel.setForeground(fontColor);

        hostIpLabel.setFont(boldTextFont);
        hostIpLabel.setForeground(fontColor);

        userNameArea.setFont(plainTextFont);
        userNameArea.setBackground(textFieldBackground);
        userNameArea.setForeground(fontColor);
        userNameArea.setSelectedTextColor(fontColor);
        userNameArea.setSelectionColor(textSelection);

        hostIpField.setFont(plainTextFont);
        hostIpField.setBackground(textFieldBackground);
        hostIpField.setForeground(fontColor);
        hostIpField.setSelectedTextColor(fontColor);
        hostIpField.setSelectionColor(textSelection);

        userNameButton.setFont(boldTextFont);
        userNameButton.setBackground(mainBackground);
        userNameButton.setForeground(fontColor);

        connectButton.setFont(boldTextFont);
        connectButton.setBackground(mainBackground);
        connectButton.setForeground(fontColor);

        msgDisplayArea.setFont(plainTextFont);
        msgDisplayArea.setBackground(textFieldBackground);
        msgDisplayArea.setForeground(fontColor);
        msgDisplayArea.setSelectedTextColor(fontColor);
        msgDisplayArea.setSelectionColor(textSelection);

        msgInputArea.setFont(plainTextFont);
        msgInputArea.setBackground(textFieldBackground);
        msgInputArea.setForeground(fontColor);
        msgInputArea.setSelectedTextColor(fontColor);
        msgInputArea.setSelectionColor(textSelection);

        msgSendButton.setFont(boldTextFont);
        msgSendButton.setBackground(mainBackground);
        msgSendButton.setForeground(fontColor);
    }

    private void createConnection() throws IOException {
        if (!connected) {
            serverAddress = hostIpField.getText();
            clientSocket = new Socket(serverAddress, portNumber);

            if (clientSocket.isConnected()) {
                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                out = new PrintWriter(clientSocket.getOutputStream(), true);
                String serverAddress = String.valueOf(clientSocket.getLocalAddress());
                hostIpLabel.setVisible(false);
                hostIpField.setVisible(false);
                connectButton.setVisible(false);
                connected = true;

                inputLine = in.readLine();
                msgDisplayArea.append(inputLine + " (" + serverAddress.substring(1, serverAddress.length()) + ", " + portNumber + ")");

                listenForMessages();
            }
        }
    }

    private void listenForMessages() throws IOException {
        Timer msgRecvUpdate = new Timer();

        msgRecvUpdate.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                try {
                    receiveMessage();
                } catch (IOException ex) {
                    connected = false;
                    Logger.getLogger(TCPMessengerClient.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (!connected) {
                    msgDisplayArea.append("\n\nConnection closed.");
                    autoScroll();
                    msgRecvUpdate.cancel();
                }
            }
        }, 50, 200);
    }

    private void receiveMessage() throws IOException {
        if ((inputLine = in.readLine()) != null) {
            if (talking || initMsg == 0) {
                msgDisplayArea.append("\n\n");
                initMsg = 1;
            } else {
                msgDisplayArea.append("\n");
            }

            msgDisplayArea.append(inputLine);
            talking = false;
            autoScroll();
        }
    }

    private void sendMessage() {
        if (!msgInputArea.getText().equals("\n") && !msgInputArea.getText().equals("") && connected) {
            outputLine = msgInputArea.getText();

            if (!talking) {
                out.printf(userName + ": " + outputLine);
                msgDisplayArea.append("\n\n" + userName + ": ");
            } else {
                out.printf(outputLine);
                msgDisplayArea.append("\n");
            }

            outputLine = outputLine.substring(0, outputLine.length() - 1);
            msgDisplayArea.append(outputLine);
            talking = true;
        }

        msgInputArea.setText("");
        autoScroll();
    }

    private void setUserName() {
        userName = userNameArea.getText();
        userNameArea.setForeground(new Color(0, 195, 0));
        msgInputArea.transferFocusBackward();
    }

    private void autoScroll() {
        msgDisplayArea.setSelectionStart(msgDisplayArea.getText().length());
    }

    private Image setIcon() {
        URL iconURL = getClass().getResource("skywalker.png");
        icon = new ImageIcon(iconURL);
        return icon.getImage();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPMessengerClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPMessengerClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPMessengerClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPMessengerClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPMessengerClient().setVisible(true);
            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField hostIpField;
    private javax.swing.JLabel hostIpLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea msgDisplayArea;
    private javax.swing.JTextArea msgInputArea;
    private javax.swing.JButton msgSendButton;
    private javax.swing.JTextField userNameArea;
    private javax.swing.JButton userNameButton;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
